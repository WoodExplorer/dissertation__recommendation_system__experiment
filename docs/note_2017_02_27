{
chap 4 exp 2: comparison across variants:

table name: 
	metrics__chap4_exp2_across_variants__N_20__iter_30__da_1M


cx = sqlite3.connect('my_metrics.db')
cur = cx.cursor()


cur.execute('select * from ???')
r = cur.fetchall()


>>> for x in r:
...     print x
... 
(9, 100, 1, 1, u'rating', 0.32916666666666666, 0.049430300148290904, 0.08595318271579416, u'2017-02-27 09:19:20')
(10, 100, 1, 1, u'rating_time', 0.29470833333333335, 0.04425576113276728, 0.07695529890491293, u'2017-02-27 09:19:35')
(11, 100, 1, 1, u'simple_time', 0.29204166666666664, 0.04385531313156594, 0.07625896932341789, u'2017-02-27 09:19:50')
(12, 100, 1, 1, u'simple', 0.3292083333333333, 0.04943655714830967, 0.08596406286550502, u'2017-02-27 09:20:06')
(13, 100, 1, 1, u'simple_tfidf', 0.3257083333333333, 0.04891096914673291, 0.08505013028979279, u'2017-02-27 09:20:22')
(14, 100, 1, 1, u'simple_time_tfidf', 0.29391666666666666, 0.044136878132410635, 0.0767485760604066, u'2017-02-27 09:20:38')
(15, 100, 1, 1, u'rating_time_tfidf', 0.2961666666666667, 0.04447475613342427, 0.07733610414479304, u'2017-02-27 09:20:53')
(16, 100, 1, 1, u'rating_tfidf', 0.331375, 0.049761921149285765, 0.08652983065046975, u'2017-02-27 09:21:09')


>>> for x in r:
...     for y in x:
...         print y, '\t',
...     print
... 

9 	100 	1 	1 	rating 	0.329166666667 	0.0494303001483 	0.0859531827158 	2017-02-27 09:19:20 	
10 	100 	1 	1 	rating_time 	0.294708333333 	0.0442557611328 	0.0769552989049 	2017-02-27 09:19:35 	
11 	100 	1 	1 	simple_time 	0.292041666667 	0.0438553131316 	0.0762589693234 	2017-02-27 09:19:50 	
12 	100 	1 	1 	simple 	0.329208333333 	0.0494365571483 	0.0859640628655 	2017-02-27 09:20:06 	
13 	100 	1 	1 	simple_tfidf 	0.325708333333 	0.0489109691467 	0.0850501302898 	2017-02-27 09:20:22 	
14 	100 	1 	1 	simple_time_tfidf 	0.293916666667 	0.0441368781324 	0.0767485760604 	2017-02-27 09:20:38 	
15 	100 	1 	1 	rating_time_tfidf 	0.296166666667 	0.0444747561334 	0.0773361041448 	2017-02-27 09:20:53 	
16 	100 	1 	1 	rating_tfidf 	0.331375 	0.0497619211493 	0.0865298306505 	2017-02-27 09:21:09 

}


{
M: Wow! Finally! Now I know how to draw frequency distribution with few lines of code.

http://pandas.pydata.org/pandas-docs/stable/visualization.html

In [21]: df4 = pd.DataFrame({'a': np.random.randn(1000) + 1, 'b': np.random.randn(1000),
   ....:                     'c': np.random.randn(1000) - 1}, columns=['a', 'b', 'c'])
   ....: 

In [22]: plt.figure();

In [23]: df4.plot.hist(alpha=0.5)
Out[23]: <matplotlib.axes._subplots.AxesSubplot at 0x7ff26779c3d0>

}

{
M: Oh, it seems pandas understands that -- when it come across a NaN, draw nothing.

df2 = pd.DataFrame(np.array([
    [1, 5],
    [2, np.NaN],
]), columns=['a', 'b'])
df2.plot.bar()

plt.show()

}
