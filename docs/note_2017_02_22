word2vec beats CF!
{
	sqlite db table: metrics__normalized_user_repr__N_20__iter_30__batch_words_10000__da_1M

	traom_test_ratio:		
		train, test = extract_data_from_file_and_generate_train_and_test(data_filename, 0.8, seed, delimiter, test_data_inner_ratio)

	test_data_inner_ratio:
		test_data_inner_ratio = 0.8
	
	K = 10
	N = 20
	para_iter = 30
	batch_words = 10000

	CF
	{'recall': 0.04585755313757266, 'precision': 0.305375, 'f1': 0.0797406172308931}
	word2vec
	{'recall': 0.05017488315052465, 'precision': 0.334125, 'f1': 0.08724792053138651}

	(20, 110, 1, 1, 0.334125, 0.05017488315052465, 0.08724792053138651, u'2017-02-22 15:30:46')
}

svd
{

##### without removing already interacted items    #####

	predictions_without_filtering = None

	mid = [(uid, iid, -1) for iid in all_items for uid in all_user_in_test]

	predictions_without_filtering = algo.test(mid)

	mid = None

	rec_without_filtering = generate_rec(predictions_without_filtering)

	calculate_metrics(original_test, rec_without_filtering)

	metric calculation: time consumption: 0

	{'f1': 0.019725711425789216,
	 'precision': 0.07554166666666666,
	 'recall': 0.011343941034031822}


##### after removing already interacted items    #####

	predictions_with_filtering = algo.test(mid)

	mid = None

	rec_with_filtering = generate_rec(predictions_with_filtering)

	calculate_metrics(original_test, rec_with_filtering)

	metric calculation: time consumption: 0

	{'f1': 0.022369587805528203,
	 'precision': 0.08566666666666667,
	 'recall': 0.012864392038593176}

